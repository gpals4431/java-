<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
	<!-- 핵심관심 모듈의 클래스를 Spring Bean 으로 등록 -->
	<bean class="xyz.itwill07.aop.HewonDAOImpl" id="hewonDAO"/>
	<bean class="xyz.itwill07.aop.HewonServiceImpl" id="hewonService">
		<property name="hewonDAO" ref="hewonDAO"/>
	</bean>
	
	<!-- 횡단관심 모듈의 클래스(advice class)를 spring bean으로 등록 -->
	<bean class="xyz.itwill07.aop.HewonAdvice" id="hewonAdvice"/>
	
	<!-- Spring AOP(관점지향프로그램) : AspectJ 컴파일러에의해 프로그램 실행시 핵심관심코드와 횡단관심코드가 결합(weaving)되어
	실행되기 위한 기능을 제공
	Spring AOP 기능을 사용하기 위해서는 aspectjrt 라이브러리와 aspectjweaver 라이브러리가 반드시 빌드처리 
	- 메이븐 이용 : pom.xml
	Spring Bean Configuration File 에서 Spring Aop 기능을 구현하기 위해 AOP 네임스페이스를
	추가하여 spring-aop.xsd 파일의 엘리먼트를 제공받아 사용 -->
	
	<!--<aop:config : Spring AOP 관련 설정을 제공하기 위한 엘리먼트 -->
	<aop:config>
		<!-- aspect : 핵심에 횡단을 원하는 위치(join point)에 삽입하여 실행되도록 설정하기 위한 엘리먼트  -->
		<!-- => 횡단관심코드가 삽입될 위치(join point)를 하위 엘리먼트로 설정
		=> 하위 엘리먼트 : before, after, after-returning, after-throwing, around(전,후)
		ref 속성 : 횡단관심모듈로 작성된 클래스의 spring bean의 식별자(beanName)를 속성값으로 설정
		=> 횡단관심코드의 메소드를 호출하기 위해 객체를 제공받기 위한 속성 -->
		<aop:aspect ref="hewonAdvice">
			<!-- before : 타겟메소드의 명령(핵심관심코드)을 실행하기 전에 횡단관심코드로 삽입되어 실행되도록 설정하는 엘리먼트  -->
			<!-- method 속성 : 횡단관심코드의 메소드 이름을 속성값으로 설정 - 이클립스 자동 완성 기능 사용
			pointcut 속성: 핵심관심모듈로 작성된 클래스의 SpringBean의 메소드 중 횡단관심코드가 삽입될 메소드를 지정하기위한 
			Pointcut 표현식을 속성값으로 설정 - 타켓메소드 지정 
			=>execution 명시자, within 명시자, bean 명시자를 이용하여 타겟메소드를 설정하며
			명시자에 검색패턴문자와 연산자를 사용 가능
			=> PointCut 표현식에서 사용 가능한 검색패턴문자 : ..(0개 이상), *(1개 이상), ?(0개 또는 1개 이상)
			=> PointCut 표현식에서 사용 가능한 연산자 : !, &&, || - 명시자 결합  -->
			
			<!-- excution 명시자를 이용하여 타겟메소들르 지정하는 방법 
			=>  excution 명시자는 메소드의 머릿부를 표현하여 타겟메소드 지정
			=> 형식) execution([접근제한자] 반환형 [패키지.클래스.]메소드명(자료형,자료형,...)
			=> 클래스 대신 인터페이스 사용 가능 - 인터페이스를 상속받은 모든 자식클래스를 표현
			=> 반환형 또는 매개변수의 자료형이 클래스(인터페이스)인 경우 패키지를 포함하여 표현 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(void addHewon(xyz.itwill07.aop.Hewon))"-->
			<!-- 메소드의 매개변수가 0개 이상인 메소드를 타겟메소드로 지정 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* *(..))"/> -->
			<!-- 메소드의 매개변수가 1개 이상인 메소드를 타겟메소드로 지정 - 매개변수가 반드시 존재 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* *(*))"/> -->
			<!-- xyz.itwill07.aop 패키지(하위 패키지 미포함)의 모든 클래스의 모든 메소드를 타겟메소드로 지정 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill07.aop.*.*(..))"/> -->
			<!-- xyz.itwill07.aop 패키지와 하위 패키지의 모든 클래스의 모든 메소드를 타겟메소드로 지정 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill07.aop..*(..))"/> 하위패키지 포함 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill07.aop.HewonDAO.*(..))"/>DAO 클래스 호출 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill07.aop.Hewon*(..))"/> hewon으로 시작되는 모든 클래스 호출 -->
			<!-- <aop:before method="beforeLog" pointcut="!execution(* get*(..))"/ get으로 시작되는 모든 것을 제외한 클래스 호출 > -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* *(int)) or execution(int *(..))"/>  -->
			
			<!-- within 명시자를 사용하여 타겟메소드를 지정하는 방법 -->
			<!-- => Spring Bean으로 등록된 클래스에 작성된 모든 메소드를 타겟메소드로 지정 -->
			<!-- 형식)within(패키지명.클래스명) -->
			<!-- => 클래스 대신 인터페이스 사용 불가능 -->
			<!-- <aop:before method="beforeLog" pointcut="within(xyz.itwill07.aop.HewonDAOImpl)"/> -->
			<!-- <aop:before method="beforeLog" pointcut="within(xyz.itwill07.aop.HewonServiceImpl)"/> -->
			<!-- <aop:before method="beforeLog" pointcut="within(xyz.itwill07.aop.*)"/> -->
			
			<!-- bean 명시자를 사용하여 타겟메소드를 지정하는 방법 -->
			<!-- => Spring Bean의 beanName으로 등록된 클래스의 모든 메소드를 타겟메소드로 지정 -->
			<!-- 형식)bean(beanName) -->
			<!-- <aop:before method="beforeLog" pointcut="bean(hewonDAO)"/> -->
			<!-- <aop:before method="beforeLog" pointcut="bean(hewonService*)"/> -->
			
			<!-- pointcut : Spring Bean으로 등록된 클래스(핵심관심모듈)의 메소드 중 횡단관심코드가
			삽입될 타겟메소드를 지정하기 위한 엘리먼트 -->
			<!-- => 많이 사용되는 PointCut 표현식을 저장하여 타겟메소드로 제공하기 위해 사용 -->
			<!-- => aspect 엘리먼트 선언 전에 작성(전역)하거나 aspect 엘리먼트의 하위 엘리먼트로 작성(지역) 가능 -->
			<!-- expression 속성 : 타겟메소드를 지정하기 위한 PonitCut 표현식을 속성값으로 설정 -->
			<!-- id 속성 : pointcut 엘리먼트를 구분하기 위한 식별자를 속성값으로 설정 -->
			<aop:pointcut expression="execution(* xyz.itwill07.aop.HewonDAO.*(..))" id="hewonDAOPointcut"/>
			<aop:pointcut expression="execution(* xyz.itwill07.aop.HewonService.*(..))" id="hewonServicePointcut"/>
			
			<!-- pointcut-ref 속성 : pointcut 엘리먼트의 식별자를 속성값으로 설정 -->
			<!-- <aop:before method="beforeLog" pointcut-ref="hewonDAOPointcut"/> -->
			<aop:before method="beforeLog" pointcut-ref="hewonServicePointcut"/>
			
			<!-- after : 타겟메소드의 명령(핵심관심코드) 실행 후 횡단관심코드를 무조건 삽입하여
		 	실행되도록 설정하는 엘리먼트 -->
			<aop:after method="afterLog" pointcut-ref="hewonServicePointcut"/>

			<!-- after-returning : 타겟메소드의 명령(핵심관심코드)이 정상적으로 실행된 후
			횡단관심코드를 삽입하여	실행되도록 설정하는 엘리먼트 -->			
			<aop:after-returning method="afterReturningLog" pointcut-ref="hewonServicePointcut"/>
			
			<!-- after-throwing : 타겟메소드의 명령(핵심관심코드)이 실행될 때 예외가 발생된 
			경우 횡단관심코드를 삽입하여 실행되도록 설정하는 엘리먼트 -->
			<aop:after-throwing method="afterThrowingLog" pointcut-ref="hewonServicePointcut"/>
			
			<!-- around : 타겟메소드의 명령(핵심관심코드)이 실행전과 후에 횡단관심코드를 
			삽입하여 실행되도록 설정하는 엘리먼트 -->
			<aop:around method="aroundLog" pointcut-ref="hewonServicePointcut"/>			
		</aop:aspect>
	</aop:config>
	
</beans>
